#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;

typedef int ElemType;

typedef struct node
{
	ElemType data;
	struct node* next;
}LinkNode,*LinkList;

LinkList CrtList(int* arr,int n)
{
	LinkList L = new LinkNode;
	LinkList r = L, s;
	for (int i = 0; i < n; i++)
	{
		s = new LinkNode;
		s->data = arr[i];
		r->next = s;
		r = s;
	}
	r->next = NULL;
	return L;
}

void Disp(LinkList L)
{
	LinkList p = L->next;
	while (p)
	{
		cout << p->data << ' ';
		p = p->next;
	}
}

//void DelMax(LinkList& L)//删除最大节点
//{
//	LinkList max, maxpre;
//	LinkList pre = L->next;
//	LinkList p = pre->next;
//	maxpre = L; max = pre;
//	while (p)
//	{
//		if (p->data > max->data)
//		{
//			maxpre = pre;
//			max = p;
//			pre = p;
//			p = p->next;
//		}
//		else
//		{
//			pre = p;
//			p = p->next;
//		}
//	}
//	maxpre->next = max->next;
//	free(max);
//	max = NULL;
//}

void ShellSort(LinkList* arr, int n)//单链表的希尔排序
{
	int d = n / 2;
	while (d > 0)
	{
		for (int i = d; i < n; i++)
		{
			LinkList tmp = arr[i];
			int j = i - d;
			while (j >= 0 && arr[j]->data > tmp->data)
			{
				arr[j + d] = arr[j];
				j = j - d;
			}
			arr[j + d] = tmp;
		}
		d = d / 2;
	}
}

int main()
{
	int a[] = { 1,7,8,5,6,0,1,2,4,4,0 };
	LinkList L = CrtList(a, sizeof(a) / sizeof(a[0]));
	Disp(L);
	LinkList* arr = new LinkList[20];//指针数组
	LinkList p = L->next;
	int i = 0;
	while (p)
	{
		arr[i] = p;
		p = p->next;
		i++;
	}
	/*DelMax(L);
	cout << endl;
	Disp(L);*/
	cout << endl;
	ShellSort(arr,sizeof(a) / sizeof(a[0]));
	for (int i = 0; i < 11; i++)
	{
		cout << arr[i]->data << ' ';
	}
	delete(arr);
	return 0;
}
